name: ci_quality_report

on:
  push:
    branches:
      - master
  # TODO: cron weekly
  workflow_dispatch:
    inputs:
      n:
        description: 'Number of times to run CI jobs (max 100)'
        default: 100
        required: true
        type: number

env:
  N: ${{ github.event.inputs.n || '4' }}

jobs:
  # generate-matrix-strategy:
  #   name: generate matrix strategy
  #   runs-on: ubuntu-latest
  #   outputs:
  #     generated_matrix: ${{ steps.gen.outputs.generated_matrix }}
  #   steps:
  #     - id: gen
  #       run: |
  #         total_runs=${{ env.N }}
  #         if [ $total_runs -gt 100 ]; then
  #           echo "Max number of runs is 100"
  #           exit 1
  #         fi
  #         runs_per_matrix=$((total_runs / 4))
  #         generated_matrix=$(python3 -c "import json; print(json.dumps({ 'run_number' : [x for x in range($runs_per_matrix)] }))")
  #         echo $generated_matrix
  #         echo "generated_matrix=$generated_matrix" >> $GITHUB_OUTPUT

  # selfdrive_tests_0:
  #   needs: generate-matrix-strategy
  #   strategy:
  #     matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
  #   uses: signed-long/openpilot/.github/workflows/selfdrive_tests.yaml@master
  #   with:
  #     run_number: ${{ matrix.run_number }}_selfdrive_tests_0

  # selfdrive_tests_1:
  #   needs: generate-matrix-strategy
  #   strategy:
  #     matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
  #   uses: signed-long/openpilot/.github/workflows/selfdrive_tests.yaml@master
  #   with:
  #     run_number: ${{ matrix.run_number }}_selfdrive_tests_1

  # selfdrive_tests_2:
  #   needs: generate-matrix-strategy
  #   strategy:
  #     matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
  #   uses: signed-long/openpilot/.github/workflows/selfdrive_tests.yaml@master
  #   with:
  #     run_number: ${{ matrix.run_number }}_selfdrive_tests_2

  # selfdrive_tests_3:
  #   needs: generate-matrix-strategy
  #   strategy:
  #     matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
  #   uses: signed-long/openpilot/.github/workflows/selfdrive_tests.yaml@master
  #   with:
  #     run_number: ${{ matrix.run_number }}_selfdrive_tests_3

  # tools_tests_0:
  #   needs: generate-matrix-strategy
  #   strategy:
  #     matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
  #   uses: signed-long/openpilot/.github/workflows/tools_tests.yaml@master
  #   with:
  #     run_number: ${{ matrix.run_number }}_tools_tests_0

  # tools_tests_1:
  #   needs: generate-matrix-strategy
  #   strategy:
  #     matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
  #   uses: signed-long/openpilot/.github/workflows/tools_tests.yaml@master
  #   with:
  #     run_number: ${{ matrix.run_number }}_tools_tests_1

  # tools_tests_2:
  #   needs: generate-matrix-strategy
  #   strategy:
  #     matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
  #   uses: signed-long/openpilot/.github/workflows/tools_tests.yaml@master
  #   with:
  #     run_number: ${{ matrix.run_number }}_tools_tests_2

  # tools_tests_3:
  #   needs: generate-matrix-strategy
  #   strategy:
  #     matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
  #   uses: signed-long/openpilot/.github/workflows/tools_tests.yaml@master
  #   with:
  #     run_number: ${{ matrix.run_number }}_tools_tests_3

  report:
    # needs: [selfdrive_tests_0, selfdrive_tests_1, selfdrive_tests_2, selfdrive_tests_3, tools_tests_0, tools_tests_1, tools_tests_2, tools_tests_3]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Get job results
        uses: actions/github-script@v7
        id: get-job-results
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const jobs = await github
              .paginate("GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt}/jobs", {
                owner: "signed-long",
                repo: "openpilot",
                run_id: "9706057362",
                attempt: "1",
              })
            var report = {}
            jobs.slice(1, jobs.length-1).forEach(job => {
              const jobName = job.name.split('/')[1].trim();
              report[jobName] = report[jobName] || { successes: [], failures: [], cancelled: [] };
              switch (job.conclusion) {
                case "success":
                  report[jobName].successes.push(job.html_url); break;
                case "failure":
                  report[jobName].failures.push(job.html_url); break;
                case "cancelled":
                  report[jobName].cancelled.push(job.html_url); break;
              }
            });
            return JSON.stringify(report);

      - name: Add job results to summary
        env:
          JOB_RESULTS:  ${{ steps.get-job-results.outputs.result }}
        run: |
          echo $JOB_RESULTS
          echo $JOB_RESULTS > job_results.json
          generate_html_table() {
            echo "<table>"
            echo "<thead>"
            echo "  <tr>"
            echo "    <th>Job</th>"
            echo "    <th>Succeeded ✅</th>"
            echo "    <th>Failed ❌</th>"
            echo "    <th>Cancelled (timed out) ⏰</th>"
            echo "  </tr>"
            echo "</thead>"
            jq -r '
              "<tbody>",
              keys[] as $job |
              "<tr>",
              "  <td>\($job)</td>",
              "  <td>",
              "    <details>",
              "      <summary>(\(.[$job].successes | length))</summary>",
              "      \(.[$job].successes[])<br>",
              "    </details>",
              "  </td>",
              "  <td>",
              "    <details>",
              "      <summary>(\(.[$job].failures | length))</summary>",
              "      \(.[$job].failures[])<br>",
              "    </details>",
              "  </td>",
              "  <td>",
              "    <details>",
              "      <summary>(\(.[$job].cancelled | length))</summary>",
              "      \(.[$job].cancelled[])<br>",
              "    </details>",
              "  </td>",
              "</tr>"
            ' job_results.json
            echo  "</tbody>"
            echo  "</table>"
          }
          echo "# CI Job Summary" >> $GITHUB_STEP_SUMMARY
          generate_html_table >> $GITHUB_STEP_SUMMARY


