name: ci_quality_report

on:
  push:
    branches:
      - master
  # TODO: cron weekly
  workflow_dispatch:
    inputs:
      n:
        description: 'Number of times to run CI jobs (max 100)'
        default: 100
        required: true
        type: number

env:
  N: ${{ github.event.inputs.n || '4' }}

jobs:
  generate-matrix-strategy:
    name: generate matrix strategy
    runs-on: ubuntu-latest
    outputs:
      generated_matrix: ${{ steps.gen.outputs.generated_matrix }}
    steps:
      - id: gen
        run: |
          total_runs=${{ env.N }}
          if [ $total_runs -gt 100 ]; then
            echo "Max number of runs is 100"
            exit 1
          fi
          runs_per_matrix=$((total_runs / 4))
          generated_matrix=$(python3 -c "import json; print(json.dumps({ 'run_number' : [x for x in range($runs_per_matrix)] }))")
          echo $generated_matrix
          echo "generated_matrix=$generated_matrix" >> $GITHUB_OUTPUT

  selfdrive_tests_0:
    needs: generate-matrix-strategy
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
    uses: signed-long/openpilot/.github/workflows/selfdrive_tests.yaml@master
    with:
      run_number: ${{ matrix.run_number }}_selfdrive_tests_0

  selfdrive_tests_1:
    needs: generate-matrix-strategy
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
    uses: signed-long/openpilot/.github/workflows/selfdrive_tests.yaml@master
    with:
      run_number: ${{ matrix.run_number }}_selfdrive_tests_1

  selfdrive_tests_2:
    needs: generate-matrix-strategy
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
    uses: signed-long/openpilot/.github/workflows/selfdrive_tests.yaml@master
    with:
      run_number: ${{ matrix.run_number }}_selfdrive_tests_2

  selfdrive_tests_3:
    needs: generate-matrix-strategy
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
    uses: signed-long/openpilot/.github/workflows/selfdrive_tests.yaml@master
    with:
      run_number: ${{ matrix.run_number }}_selfdrive_tests_3

  tools_tests_0:
    needs: generate-matrix-strategy
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
    uses: signed-long/openpilot/.github/workflows/tools_tests.yaml@master
    with:
      run_number: ${{ matrix.run_number }}_tools_tests_0

  tools_tests_1:
    needs: generate-matrix-strategy
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
    uses: signed-long/openpilot/.github/workflows/tools_tests.yaml@master
    with:
      run_number: ${{ matrix.run_number }}_tools_tests_1

  tools_tests_2:
    needs: generate-matrix-strategy
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
    uses: signed-long/openpilot/.github/workflows/tools_tests.yaml@master
    with:
      run_number: ${{ matrix.run_number }}_tools_tests_2

  tools_tests_3:
    needs: generate-matrix-strategy
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix-strategy.outputs.generated_matrix) }}
    uses: signed-long/openpilot/.github/workflows/tools_tests.yaml@master
    with:
      run_number: ${{ matrix.run_number }}_tools_tests_3

  report:
    needs: [selfdrive_tests_0, selfdrive_tests_1, selfdrive_tests_2, selfdrive_tests_3, tools_tests_0, tools_tests_1, tools_tests_2, tools_tests_3]
    runs-on: ubuntu-latest
    steps:
      - name: Parse job results
        id: parse
        run: |
          failed_jobs=$(echo "${{ needs }}" | jq 'map(select(.outcome == "failure")) | length')
          total_jobs=$(echo "${{ needs }}" | jq 'length')
      - name: Report results
        run: |
          echo "## CI Quality Report" > $GITHUB_STEP_SUMMARY
          echo "### Failed jobs" >> $GITHUB_STEP_SUMMARY
          echo "Failed jobs: ${{ steps.parse.outputs.failed_jobs }}/${{ steps.parse.outputs.total_jobs }}" >> $GITHUB_STEP_SUMMARY
          echo "### Failed jobs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs }}" | jq 'map(select(.outcome == "failure"))' >> $GITHUB_STEP_SUMMARY
          echo "### Successful jobs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs }}" | jq 'map(select(.outcome == "success"))' >> $GITHUB_STEP_SUMMARY
          echo "### Cancelled jobs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs }}" | jq 'map(select(.outcome == "cancelled"))' >> $GITHUB_STEP_SUMMARY
          echo "### Skipped jobs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs }}" | jq 'map(select(.outcome == "skipped"))' >> $GITHUB_STEP_SUMMARY
          echo "### Neutral jobs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs }}" | jq 'map(select(.outcome == "neutral"))' >> $GITHUB_STEP_SUMMARY
          echo "### Timed out jobs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs }}" | jq 'map(select(.outcome == "timed_out"))' >> $GITHUB_STEP_SUMMARY
          echo "### Unknown jobs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs }}" | jq 'map(select(.outcome == "unknown"))' >> $GITHUB_STEP_SUMMARY
          echo "### Total jobs" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs }}" | jq 'length' >> $GITHUB_STEP_SUMMARY
          echo "### Total runs" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.N }}" >> $GITHUB_STEP_SUMMARY
          echo "### Total runs per job" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.gen.outputs.generated_matrix }}" >> $GITHUB_STEP_SUMMARY
          echo "### Total runs per job" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.gen.outputs.generated_matrix }}" >> $GITHUB_STEP_SUMMARY
          echo "### Total runs per job" >>
